{"version":3,"sources":["components/static/images/FederalistImage.jpg","components/header/Navbar.js","components/projects/federalist.js","components/projects/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navbar","classes","react_default","a","createElement","className","AppBar","position","Toolbar","Button","color","href","Typography","variant","Link","component","RouterLink","to","card","maxWidth","marginLeft","marginTop","media","height","paddingTop","button","marginBottom","MarginLeft","align","Federalist","Card","CardHeader","subheader","CardMedia","image","FederalistImage","CardContent","Projects","Component","Root","About","Resume","Certification","App","react_router_dom","react_router","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3066d6cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/FederalistImage.81b197f6.jpg\";","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport Link from '@material-ui/core/Link';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Navbar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n        <Button color=\"inherit\" href=\"/\"  className={classes.menuButton}>\r\n         \r\n          <Typography>\r\n             Akash Gandhi\r\n          </Typography>\r\n          </Button>\r\n          \r\n          \r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            \r\n          </Typography>\r\n\r\n          {/* <Button color=\"inherit\" href=\"/about\"  className={classes.menuButton}>About Me</Button>\r\n          \r\n          <Button color=\"inherit\" href=\"/resume\"  className={classes.menuButton}>Resume</Button>\r\n          <Button color=\"inherit\" href=\"/projects\"  className={classes.menuButton}>Projects</Button>\r\n          <Button color=\"inherit\" href=\"others\" className={classes.menuButton}>In Progress</Button> */}\r\n\r\n          <Link component={RouterLink} to=\"/about\" color=\"inherit\" className={classes.menuButton}>About me</Link>\r\n          <Link component={RouterLink} to=\"/resume\" color=\"inherit\" className={classes.menuButton}>Resume</Link>\r\n          <Link component={RouterLink} to=\"/projects\" color=\"inherit\" className={classes.menuButton}>Projects</Link>\r\n          <Link component={RouterLink} to=\"/others\" color=\"inherit\" className={classes.menuButton}>In Progress</Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport FederalistImage from \"../static/images/FederalistImage.jpg\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n      maxWidth: 345,\r\n      marginLeft:\"5%\",\r\n      marginTop:\"2%\"\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: '56.25%', // 16:9\r\n    },\r\n    button:{\r\n        marginBottom:1,\r\n        marginTop:10,\r\n        MarginLeft:10,\r\n        align:\"right\"\r\n    }\r\n  }));\r\n  \r\n\r\nexport default function Federalist() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n        <Card className={classes.card}>\r\n      <CardHeader\r\n        title=\"The Federalist papers\"\r\n        subheader=\"Skills : Data Analysis with Python\"\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={FederalistImage}\r\n        title=\"Federalist Papers\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n       Brief description\r\n        </Typography>\r\n      </CardContent>\r\n           <Button color=\"primary\">\r\n               Open\r\n           </Button>\r\n    </Card>\r\n    </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport Federalist from \"./federalist\"\r\n\r\nclass Projects extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n<Federalist></Federalist>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Projects","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/header/Navbar\"\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\nimport Projects from \"./components/projects/index\"\r\n\r\nfunction Root() {\r\n  return <h2>Root</h2>;\r\n}\r\n\r\nfunction About() {\r\n  return <h2>About</h2>;\r\n}\r\n\r\nfunction Resume() {\r\n  return <h2>Resume</h2>;\r\n}\r\n\r\n\r\nfunction Certification(){\r\n  return <h2>Certification</h2>\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n   \r\n    <div>\r\n       <Router>\r\n    \r\n      <Navbar/>\r\n\r\n      <Route exact path=\"/\" component={Root} />\r\n      <Route path=\"/about\" component={About} />\r\n      <Route path=\"/resume\" component={Resume} />\r\n      <Route path=\"/projects\" component={Projects} />\r\n      <Route path=\"/certification\" component={Certification} />\r\n      </Router>\r\n      \r\n    </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}